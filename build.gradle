plugins {
    id "groovy"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "io.micronaut.application" version "$micronautGradlePluginVersion"
    id 'gesus.release' version "${gradlePluginVersion}"
    id "com.diffplug.spotless" version "6.2.1"
}

version = "0.1"
group = "ch.silviowangler.oms"

dependencies {

    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor("io.micronaut:micronaut-http-validation")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.flyway:micronaut-flyway")
    runtimeOnly "org.flywaydb:flyway-mysql:8.4.2"
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("jakarta.annotation:jakarta.annotation-api")
    compileOnly("org.projectlombok:lombok")
    runtimeOnly("org.mariadb.jdbc:mariadb-java-client")
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("io.micronaut:micronaut-validation")
    compileOnly("javax.inject:javax.inject:1")

    testImplementation("org.testcontainers:mariadb")
    testImplementation("org.testcontainers:spock")
    testImplementation("org.testcontainers:testcontainers")

    implementation 'org.thymeleaf:thymeleaf:3.0.14.RELEASE'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"

    implementation "ch.onstructive.commons:onstructive-commons-java-commons:${onstructiveCommons}"
    implementation "ch.onstructive.commons:onstructive-commons-micronaut-commons:${onstructiveCommons}"
}


application {
    mainClass.set("ch.silviowangler.oms.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("ch.silviowangler.oms.*")
    }
}

spotless {
    java {
        importOrder('java', 'javax', 'ch.silviowangler', '', '\\#com.acme', '\\#')
        removeUnusedImports()

        googleJavaFormat()

        licenseHeaderFile 'license.txt'
    }
}


